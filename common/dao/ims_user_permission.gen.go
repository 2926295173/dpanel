// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/donknap/dpanel/common/entity"
)

func newUserPermission(db *gorm.DB, opts ...gen.DOOption) userPermission {
	_userPermission := userPermission{}

	_userPermission.userPermissionDo.UseDB(db, opts...)
	_userPermission.userPermissionDo.UseModel(&entity.UserPermission{})

	tableName := _userPermission.userPermissionDo.TableName()
	_userPermission.ALL = field.NewAsterisk(tableName)
	_userPermission.ID = field.NewInt32(tableName, "id")
	_userPermission.Username = field.NewString(tableName, "username")
	_userPermission.Value = field.NewField(tableName, "value")

	_userPermission.fillFieldMap()

	return _userPermission
}

type userPermission struct {
	userPermissionDo

	ALL      field.Asterisk
	ID       field.Int32
	Username field.String
	Value    field.Field

	fieldMap map[string]field.Expr
}

func (u userPermission) Table(newTableName string) *userPermission {
	u.userPermissionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userPermission) As(alias string) *userPermission {
	u.userPermissionDo.DO = *(u.userPermissionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userPermission) updateTableName(table string) *userPermission {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt32(table, "id")
	u.Username = field.NewString(table, "username")
	u.Value = field.NewField(table, "value")

	u.fillFieldMap()

	return u
}

func (u *userPermission) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userPermission) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["username"] = u.Username
	u.fieldMap["value"] = u.Value
}

func (u userPermission) clone(db *gorm.DB) userPermission {
	u.userPermissionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userPermission) replaceDB(db *gorm.DB) userPermission {
	u.userPermissionDo.ReplaceDB(db)
	return u
}

type userPermissionDo struct{ gen.DO }

type IUserPermissionDo interface {
	gen.SubQuery
	Debug() IUserPermissionDo
	WithContext(ctx context.Context) IUserPermissionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserPermissionDo
	WriteDB() IUserPermissionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserPermissionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserPermissionDo
	Not(conds ...gen.Condition) IUserPermissionDo
	Or(conds ...gen.Condition) IUserPermissionDo
	Select(conds ...field.Expr) IUserPermissionDo
	Where(conds ...gen.Condition) IUserPermissionDo
	Order(conds ...field.Expr) IUserPermissionDo
	Distinct(cols ...field.Expr) IUserPermissionDo
	Omit(cols ...field.Expr) IUserPermissionDo
	Join(table schema.Tabler, on ...field.Expr) IUserPermissionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserPermissionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserPermissionDo
	Group(cols ...field.Expr) IUserPermissionDo
	Having(conds ...gen.Condition) IUserPermissionDo
	Limit(limit int) IUserPermissionDo
	Offset(offset int) IUserPermissionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPermissionDo
	Unscoped() IUserPermissionDo
	Create(values ...*entity.UserPermission) error
	CreateInBatches(values []*entity.UserPermission, batchSize int) error
	Save(values ...*entity.UserPermission) error
	First() (*entity.UserPermission, error)
	Take() (*entity.UserPermission, error)
	Last() (*entity.UserPermission, error)
	Find() ([]*entity.UserPermission, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserPermission, err error)
	FindInBatches(result *[]*entity.UserPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.UserPermission) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserPermissionDo
	Assign(attrs ...field.AssignExpr) IUserPermissionDo
	Joins(fields ...field.RelationField) IUserPermissionDo
	Preload(fields ...field.RelationField) IUserPermissionDo
	FirstOrInit() (*entity.UserPermission, error)
	FirstOrCreate() (*entity.UserPermission, error)
	FindByPage(offset int, limit int) (result []*entity.UserPermission, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserPermissionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userPermissionDo) Debug() IUserPermissionDo {
	return u.withDO(u.DO.Debug())
}

func (u userPermissionDo) WithContext(ctx context.Context) IUserPermissionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userPermissionDo) ReadDB() IUserPermissionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userPermissionDo) WriteDB() IUserPermissionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userPermissionDo) Session(config *gorm.Session) IUserPermissionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userPermissionDo) Clauses(conds ...clause.Expression) IUserPermissionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userPermissionDo) Returning(value interface{}, columns ...string) IUserPermissionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userPermissionDo) Not(conds ...gen.Condition) IUserPermissionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userPermissionDo) Or(conds ...gen.Condition) IUserPermissionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userPermissionDo) Select(conds ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userPermissionDo) Where(conds ...gen.Condition) IUserPermissionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userPermissionDo) Order(conds ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userPermissionDo) Distinct(cols ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userPermissionDo) Omit(cols ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userPermissionDo) Join(table schema.Tabler, on ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userPermissionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userPermissionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userPermissionDo) Group(cols ...field.Expr) IUserPermissionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userPermissionDo) Having(conds ...gen.Condition) IUserPermissionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userPermissionDo) Limit(limit int) IUserPermissionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userPermissionDo) Offset(offset int) IUserPermissionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userPermissionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserPermissionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userPermissionDo) Unscoped() IUserPermissionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userPermissionDo) Create(values ...*entity.UserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userPermissionDo) CreateInBatches(values []*entity.UserPermission, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userPermissionDo) Save(values ...*entity.UserPermission) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userPermissionDo) First() (*entity.UserPermission, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserPermission), nil
	}
}

func (u userPermissionDo) Take() (*entity.UserPermission, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserPermission), nil
	}
}

func (u userPermissionDo) Last() (*entity.UserPermission, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserPermission), nil
	}
}

func (u userPermissionDo) Find() ([]*entity.UserPermission, error) {
	result, err := u.DO.Find()
	return result.([]*entity.UserPermission), err
}

func (u userPermissionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.UserPermission, err error) {
	buf := make([]*entity.UserPermission, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userPermissionDo) FindInBatches(result *[]*entity.UserPermission, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userPermissionDo) Attrs(attrs ...field.AssignExpr) IUserPermissionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userPermissionDo) Assign(attrs ...field.AssignExpr) IUserPermissionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userPermissionDo) Joins(fields ...field.RelationField) IUserPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userPermissionDo) Preload(fields ...field.RelationField) IUserPermissionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userPermissionDo) FirstOrInit() (*entity.UserPermission, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserPermission), nil
	}
}

func (u userPermissionDo) FirstOrCreate() (*entity.UserPermission, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.UserPermission), nil
	}
}

func (u userPermissionDo) FindByPage(offset int, limit int) (result []*entity.UserPermission, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userPermissionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userPermissionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userPermissionDo) Delete(models ...*entity.UserPermission) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userPermissionDo) withDO(do gen.Dao) *userPermissionDo {
	u.DO = *do.(*gen.DO)
	return u
}
