// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/donknap/dpanel/common/entity"
)

func newRegistry(db *gorm.DB, opts ...gen.DOOption) registry {
	_registry := registry{}

	_registry.registryDo.UseDB(db, opts...)
	_registry.registryDo.UseModel(&entity.Registry{})

	tableName := _registry.registryDo.TableName()
	_registry.ALL = field.NewAsterisk(tableName)
	_registry.ID = field.NewInt32(tableName, "id")
	_registry.Title = field.NewString(tableName, "title")
	_registry.ServerAddress = field.NewString(tableName, "server_address")
	_registry.Username = field.NewString(tableName, "username")
	_registry.Password = field.NewString(tableName, "password")
	_registry.Email = field.NewString(tableName, "email")

	_registry.fillFieldMap()

	return _registry
}

type registry struct {
	registryDo

	ALL           field.Asterisk
	ID            field.Int32
	Title         field.String
	ServerAddress field.String
	Username      field.String
	Password      field.String
	Email         field.String

	fieldMap map[string]field.Expr
}

func (r registry) Table(newTableName string) *registry {
	r.registryDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r registry) As(alias string) *registry {
	r.registryDo.DO = *(r.registryDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *registry) updateTableName(table string) *registry {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Title = field.NewString(table, "title")
	r.ServerAddress = field.NewString(table, "server_address")
	r.Username = field.NewString(table, "username")
	r.Password = field.NewString(table, "password")
	r.Email = field.NewString(table, "email")

	r.fillFieldMap()

	return r
}

func (r *registry) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *registry) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["title"] = r.Title
	r.fieldMap["server_address"] = r.ServerAddress
	r.fieldMap["username"] = r.Username
	r.fieldMap["password"] = r.Password
	r.fieldMap["email"] = r.Email
}

func (r registry) clone(db *gorm.DB) registry {
	r.registryDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r registry) replaceDB(db *gorm.DB) registry {
	r.registryDo.ReplaceDB(db)
	return r
}

type registryDo struct{ gen.DO }

type IRegistryDo interface {
	gen.SubQuery
	Debug() IRegistryDo
	WithContext(ctx context.Context) IRegistryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRegistryDo
	WriteDB() IRegistryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRegistryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRegistryDo
	Not(conds ...gen.Condition) IRegistryDo
	Or(conds ...gen.Condition) IRegistryDo
	Select(conds ...field.Expr) IRegistryDo
	Where(conds ...gen.Condition) IRegistryDo
	Order(conds ...field.Expr) IRegistryDo
	Distinct(cols ...field.Expr) IRegistryDo
	Omit(cols ...field.Expr) IRegistryDo
	Join(table schema.Tabler, on ...field.Expr) IRegistryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRegistryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRegistryDo
	Group(cols ...field.Expr) IRegistryDo
	Having(conds ...gen.Condition) IRegistryDo
	Limit(limit int) IRegistryDo
	Offset(offset int) IRegistryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistryDo
	Unscoped() IRegistryDo
	Create(values ...*entity.Registry) error
	CreateInBatches(values []*entity.Registry, batchSize int) error
	Save(values ...*entity.Registry) error
	First() (*entity.Registry, error)
	Take() (*entity.Registry, error)
	Last() (*entity.Registry, error)
	Find() ([]*entity.Registry, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Registry, err error)
	FindInBatches(result *[]*entity.Registry, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Registry) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRegistryDo
	Assign(attrs ...field.AssignExpr) IRegistryDo
	Joins(fields ...field.RelationField) IRegistryDo
	Preload(fields ...field.RelationField) IRegistryDo
	FirstOrInit() (*entity.Registry, error)
	FirstOrCreate() (*entity.Registry, error)
	FindByPage(offset int, limit int) (result []*entity.Registry, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRegistryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r registryDo) Debug() IRegistryDo {
	return r.withDO(r.DO.Debug())
}

func (r registryDo) WithContext(ctx context.Context) IRegistryDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r registryDo) ReadDB() IRegistryDo {
	return r.Clauses(dbresolver.Read)
}

func (r registryDo) WriteDB() IRegistryDo {
	return r.Clauses(dbresolver.Write)
}

func (r registryDo) Session(config *gorm.Session) IRegistryDo {
	return r.withDO(r.DO.Session(config))
}

func (r registryDo) Clauses(conds ...clause.Expression) IRegistryDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r registryDo) Returning(value interface{}, columns ...string) IRegistryDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r registryDo) Not(conds ...gen.Condition) IRegistryDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r registryDo) Or(conds ...gen.Condition) IRegistryDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r registryDo) Select(conds ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r registryDo) Where(conds ...gen.Condition) IRegistryDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r registryDo) Order(conds ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r registryDo) Distinct(cols ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r registryDo) Omit(cols ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r registryDo) Join(table schema.Tabler, on ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r registryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r registryDo) RightJoin(table schema.Tabler, on ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r registryDo) Group(cols ...field.Expr) IRegistryDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r registryDo) Having(conds ...gen.Condition) IRegistryDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r registryDo) Limit(limit int) IRegistryDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r registryDo) Offset(offset int) IRegistryDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r registryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRegistryDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r registryDo) Unscoped() IRegistryDo {
	return r.withDO(r.DO.Unscoped())
}

func (r registryDo) Create(values ...*entity.Registry) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r registryDo) CreateInBatches(values []*entity.Registry, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r registryDo) Save(values ...*entity.Registry) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r registryDo) First() (*entity.Registry, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Registry), nil
	}
}

func (r registryDo) Take() (*entity.Registry, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Registry), nil
	}
}

func (r registryDo) Last() (*entity.Registry, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Registry), nil
	}
}

func (r registryDo) Find() ([]*entity.Registry, error) {
	result, err := r.DO.Find()
	return result.([]*entity.Registry), err
}

func (r registryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Registry, err error) {
	buf := make([]*entity.Registry, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r registryDo) FindInBatches(result *[]*entity.Registry, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r registryDo) Attrs(attrs ...field.AssignExpr) IRegistryDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r registryDo) Assign(attrs ...field.AssignExpr) IRegistryDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r registryDo) Joins(fields ...field.RelationField) IRegistryDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r registryDo) Preload(fields ...field.RelationField) IRegistryDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r registryDo) FirstOrInit() (*entity.Registry, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Registry), nil
	}
}

func (r registryDo) FirstOrCreate() (*entity.Registry, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Registry), nil
	}
}

func (r registryDo) FindByPage(offset int, limit int) (result []*entity.Registry, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r registryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r registryDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r registryDo) Delete(models ...*entity.Registry) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *registryDo) withDO(do gen.Dao) *registryDo {
	r.DO = *do.(*gen.DO)
	return r
}
