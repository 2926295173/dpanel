// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/donknap/dpanel/common/entity"
)

func newCronLog(db *gorm.DB, opts ...gen.DOOption) cronLog {
	_cronLog := cronLog{}

	_cronLog.cronLogDo.UseDB(db, opts...)
	_cronLog.cronLogDo.UseModel(&entity.CronLog{})

	tableName := _cronLog.cronLogDo.TableName()
	_cronLog.ALL = field.NewAsterisk(tableName)
	_cronLog.ID = field.NewInt32(tableName, "id")
	_cronLog.CronID = field.NewInt32(tableName, "cron_id")
	_cronLog.Value = field.NewField(tableName, "value")

	_cronLog.fillFieldMap()

	return _cronLog
}

type cronLog struct {
	cronLogDo

	ALL    field.Asterisk
	ID     field.Int32
	CronID field.Int32
	Value  field.Field

	fieldMap map[string]field.Expr
}

func (c cronLog) Table(newTableName string) *cronLog {
	c.cronLogDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cronLog) As(alias string) *cronLog {
	c.cronLogDo.DO = *(c.cronLogDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cronLog) updateTableName(table string) *cronLog {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.CronID = field.NewInt32(table, "cron_id")
	c.Value = field.NewField(table, "value")

	c.fillFieldMap()

	return c
}

func (c *cronLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cronLog) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["cron_id"] = c.CronID
	c.fieldMap["value"] = c.Value
}

func (c cronLog) clone(db *gorm.DB) cronLog {
	c.cronLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cronLog) replaceDB(db *gorm.DB) cronLog {
	c.cronLogDo.ReplaceDB(db)
	return c
}

type cronLogDo struct{ gen.DO }

type ICronLogDo interface {
	gen.SubQuery
	Debug() ICronLogDo
	WithContext(ctx context.Context) ICronLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICronLogDo
	WriteDB() ICronLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICronLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICronLogDo
	Not(conds ...gen.Condition) ICronLogDo
	Or(conds ...gen.Condition) ICronLogDo
	Select(conds ...field.Expr) ICronLogDo
	Where(conds ...gen.Condition) ICronLogDo
	Order(conds ...field.Expr) ICronLogDo
	Distinct(cols ...field.Expr) ICronLogDo
	Omit(cols ...field.Expr) ICronLogDo
	Join(table schema.Tabler, on ...field.Expr) ICronLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICronLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICronLogDo
	Group(cols ...field.Expr) ICronLogDo
	Having(conds ...gen.Condition) ICronLogDo
	Limit(limit int) ICronLogDo
	Offset(offset int) ICronLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICronLogDo
	Unscoped() ICronLogDo
	Create(values ...*entity.CronLog) error
	CreateInBatches(values []*entity.CronLog, batchSize int) error
	Save(values ...*entity.CronLog) error
	First() (*entity.CronLog, error)
	Take() (*entity.CronLog, error)
	Last() (*entity.CronLog, error)
	Find() ([]*entity.CronLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CronLog, err error)
	FindInBatches(result *[]*entity.CronLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.CronLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICronLogDo
	Assign(attrs ...field.AssignExpr) ICronLogDo
	Joins(fields ...field.RelationField) ICronLogDo
	Preload(fields ...field.RelationField) ICronLogDo
	FirstOrInit() (*entity.CronLog, error)
	FirstOrCreate() (*entity.CronLog, error)
	FindByPage(offset int, limit int) (result []*entity.CronLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICronLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cronLogDo) Debug() ICronLogDo {
	return c.withDO(c.DO.Debug())
}

func (c cronLogDo) WithContext(ctx context.Context) ICronLogDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cronLogDo) ReadDB() ICronLogDo {
	return c.Clauses(dbresolver.Read)
}

func (c cronLogDo) WriteDB() ICronLogDo {
	return c.Clauses(dbresolver.Write)
}

func (c cronLogDo) Session(config *gorm.Session) ICronLogDo {
	return c.withDO(c.DO.Session(config))
}

func (c cronLogDo) Clauses(conds ...clause.Expression) ICronLogDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cronLogDo) Returning(value interface{}, columns ...string) ICronLogDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cronLogDo) Not(conds ...gen.Condition) ICronLogDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cronLogDo) Or(conds ...gen.Condition) ICronLogDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cronLogDo) Select(conds ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cronLogDo) Where(conds ...gen.Condition) ICronLogDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cronLogDo) Order(conds ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cronLogDo) Distinct(cols ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cronLogDo) Omit(cols ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cronLogDo) Join(table schema.Tabler, on ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cronLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cronLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cronLogDo) Group(cols ...field.Expr) ICronLogDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cronLogDo) Having(conds ...gen.Condition) ICronLogDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cronLogDo) Limit(limit int) ICronLogDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cronLogDo) Offset(offset int) ICronLogDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cronLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICronLogDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cronLogDo) Unscoped() ICronLogDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cronLogDo) Create(values ...*entity.CronLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cronLogDo) CreateInBatches(values []*entity.CronLog, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cronLogDo) Save(values ...*entity.CronLog) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cronLogDo) First() (*entity.CronLog, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronLog), nil
	}
}

func (c cronLogDo) Take() (*entity.CronLog, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronLog), nil
	}
}

func (c cronLogDo) Last() (*entity.CronLog, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronLog), nil
	}
}

func (c cronLogDo) Find() ([]*entity.CronLog, error) {
	result, err := c.DO.Find()
	return result.([]*entity.CronLog), err
}

func (c cronLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.CronLog, err error) {
	buf := make([]*entity.CronLog, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cronLogDo) FindInBatches(result *[]*entity.CronLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cronLogDo) Attrs(attrs ...field.AssignExpr) ICronLogDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cronLogDo) Assign(attrs ...field.AssignExpr) ICronLogDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cronLogDo) Joins(fields ...field.RelationField) ICronLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cronLogDo) Preload(fields ...field.RelationField) ICronLogDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cronLogDo) FirstOrInit() (*entity.CronLog, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronLog), nil
	}
}

func (c cronLogDo) FirstOrCreate() (*entity.CronLog, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.CronLog), nil
	}
}

func (c cronLogDo) FindByPage(offset int, limit int) (result []*entity.CronLog, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cronLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cronLogDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cronLogDo) Delete(models ...*entity.CronLog) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cronLogDo) withDO(do gen.Dao) *cronLogDo {
	c.DO = *do.(*gen.DO)
	return c
}
