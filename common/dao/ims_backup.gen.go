// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/donknap/dpanel/common/entity"
)

func newBackup(db *gorm.DB, opts ...gen.DOOption) backup {
	_backup := backup{}

	_backup.backupDo.UseDB(db, opts...)
	_backup.backupDo.UseModel(&entity.Backup{})

	tableName := _backup.backupDo.TableName()
	_backup.ALL = field.NewAsterisk(tableName)
	_backup.ID = field.NewInt32(tableName, "id")
	_backup.ContainerID = field.NewString(tableName, "container_id")
	_backup.Setting = field.NewField(tableName, "setting")

	_backup.fillFieldMap()

	return _backup
}

type backup struct {
	backupDo

	ALL         field.Asterisk
	ID          field.Int32
	ContainerID field.String
	Setting     field.Field

	fieldMap map[string]field.Expr
}

func (b backup) Table(newTableName string) *backup {
	b.backupDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b backup) As(alias string) *backup {
	b.backupDo.DO = *(b.backupDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *backup) updateTableName(table string) *backup {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt32(table, "id")
	b.ContainerID = field.NewString(table, "container_id")
	b.Setting = field.NewField(table, "setting")

	b.fillFieldMap()

	return b
}

func (b *backup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *backup) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["id"] = b.ID
	b.fieldMap["container_id"] = b.ContainerID
	b.fieldMap["setting"] = b.Setting
}

func (b backup) clone(db *gorm.DB) backup {
	b.backupDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b backup) replaceDB(db *gorm.DB) backup {
	b.backupDo.ReplaceDB(db)
	return b
}

type backupDo struct{ gen.DO }

type IBackupDo interface {
	gen.SubQuery
	Debug() IBackupDo
	WithContext(ctx context.Context) IBackupDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBackupDo
	WriteDB() IBackupDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBackupDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBackupDo
	Not(conds ...gen.Condition) IBackupDo
	Or(conds ...gen.Condition) IBackupDo
	Select(conds ...field.Expr) IBackupDo
	Where(conds ...gen.Condition) IBackupDo
	Order(conds ...field.Expr) IBackupDo
	Distinct(cols ...field.Expr) IBackupDo
	Omit(cols ...field.Expr) IBackupDo
	Join(table schema.Tabler, on ...field.Expr) IBackupDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBackupDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBackupDo
	Group(cols ...field.Expr) IBackupDo
	Having(conds ...gen.Condition) IBackupDo
	Limit(limit int) IBackupDo
	Offset(offset int) IBackupDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBackupDo
	Unscoped() IBackupDo
	Create(values ...*entity.Backup) error
	CreateInBatches(values []*entity.Backup, batchSize int) error
	Save(values ...*entity.Backup) error
	First() (*entity.Backup, error)
	Take() (*entity.Backup, error)
	Last() (*entity.Backup, error)
	Find() ([]*entity.Backup, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Backup, err error)
	FindInBatches(result *[]*entity.Backup, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.Backup) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBackupDo
	Assign(attrs ...field.AssignExpr) IBackupDo
	Joins(fields ...field.RelationField) IBackupDo
	Preload(fields ...field.RelationField) IBackupDo
	FirstOrInit() (*entity.Backup, error)
	FirstOrCreate() (*entity.Backup, error)
	FindByPage(offset int, limit int) (result []*entity.Backup, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBackupDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b backupDo) Debug() IBackupDo {
	return b.withDO(b.DO.Debug())
}

func (b backupDo) WithContext(ctx context.Context) IBackupDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b backupDo) ReadDB() IBackupDo {
	return b.Clauses(dbresolver.Read)
}

func (b backupDo) WriteDB() IBackupDo {
	return b.Clauses(dbresolver.Write)
}

func (b backupDo) Session(config *gorm.Session) IBackupDo {
	return b.withDO(b.DO.Session(config))
}

func (b backupDo) Clauses(conds ...clause.Expression) IBackupDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b backupDo) Returning(value interface{}, columns ...string) IBackupDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b backupDo) Not(conds ...gen.Condition) IBackupDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b backupDo) Or(conds ...gen.Condition) IBackupDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b backupDo) Select(conds ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b backupDo) Where(conds ...gen.Condition) IBackupDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b backupDo) Order(conds ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b backupDo) Distinct(cols ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b backupDo) Omit(cols ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b backupDo) Join(table schema.Tabler, on ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b backupDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBackupDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b backupDo) RightJoin(table schema.Tabler, on ...field.Expr) IBackupDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b backupDo) Group(cols ...field.Expr) IBackupDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b backupDo) Having(conds ...gen.Condition) IBackupDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b backupDo) Limit(limit int) IBackupDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b backupDo) Offset(offset int) IBackupDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b backupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBackupDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b backupDo) Unscoped() IBackupDo {
	return b.withDO(b.DO.Unscoped())
}

func (b backupDo) Create(values ...*entity.Backup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b backupDo) CreateInBatches(values []*entity.Backup, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b backupDo) Save(values ...*entity.Backup) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b backupDo) First() (*entity.Backup, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Backup), nil
	}
}

func (b backupDo) Take() (*entity.Backup, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Backup), nil
	}
}

func (b backupDo) Last() (*entity.Backup, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Backup), nil
	}
}

func (b backupDo) Find() ([]*entity.Backup, error) {
	result, err := b.DO.Find()
	return result.([]*entity.Backup), err
}

func (b backupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.Backup, err error) {
	buf := make([]*entity.Backup, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b backupDo) FindInBatches(result *[]*entity.Backup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b backupDo) Attrs(attrs ...field.AssignExpr) IBackupDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b backupDo) Assign(attrs ...field.AssignExpr) IBackupDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b backupDo) Joins(fields ...field.RelationField) IBackupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b backupDo) Preload(fields ...field.RelationField) IBackupDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b backupDo) FirstOrInit() (*entity.Backup, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Backup), nil
	}
}

func (b backupDo) FirstOrCreate() (*entity.Backup, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.Backup), nil
	}
}

func (b backupDo) FindByPage(offset int, limit int) (result []*entity.Backup, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b backupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b backupDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b backupDo) Delete(models ...*entity.Backup) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *backupDo) withDO(do gen.Dao) *backupDo {
	b.DO = *do.(*gen.DO)
	return b
}
