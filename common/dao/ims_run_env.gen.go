// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/donknap/dpanel/common/entity"
)

func newRunEnv(db *gorm.DB, opts ...gen.DOOption) runEnv {
	_runEnv := runEnv{}

	_runEnv.runEnvDo.UseDB(db, opts...)
	_runEnv.runEnvDo.UseModel(&entity.RunEnv{})

	tableName := _runEnv.runEnvDo.TableName()
	_runEnv.ALL = field.NewAsterisk(tableName)
	_runEnv.ID = field.NewInt32(tableName, "id")
	_runEnv.Name = field.NewString(tableName, "name")
	_runEnv.Lang = field.NewString(tableName, "lang")
	_runEnv.ImageBase = field.NewString(tableName, "image_base")
	_runEnv.Extra1 = field.NewString(tableName, "extra_1")
	_runEnv.Extra2 = field.NewString(tableName, "extra_2")
	_runEnv.Extra3 = field.NewString(tableName, "extra_3")
	_runEnv.ColumnName = field.NewInt32(tableName, "column_name")

	_runEnv.fillFieldMap()

	return _runEnv
}

type runEnv struct {
	runEnvDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	Lang       field.String
	ImageBase  field.String
	Extra1     field.String
	Extra2     field.String
	Extra3     field.String
	ColumnName field.Int32

	fieldMap map[string]field.Expr
}

func (r runEnv) Table(newTableName string) *runEnv {
	r.runEnvDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r runEnv) As(alias string) *runEnv {
	r.runEnvDo.DO = *(r.runEnvDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *runEnv) updateTableName(table string) *runEnv {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Name = field.NewString(table, "name")
	r.Lang = field.NewString(table, "lang")
	r.ImageBase = field.NewString(table, "image_base")
	r.Extra1 = field.NewString(table, "extra_1")
	r.Extra2 = field.NewString(table, "extra_2")
	r.Extra3 = field.NewString(table, "extra_3")
	r.ColumnName = field.NewInt32(table, "column_name")

	r.fillFieldMap()

	return r
}

func (r *runEnv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *runEnv) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 8)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["lang"] = r.Lang
	r.fieldMap["image_base"] = r.ImageBase
	r.fieldMap["extra_1"] = r.Extra1
	r.fieldMap["extra_2"] = r.Extra2
	r.fieldMap["extra_3"] = r.Extra3
	r.fieldMap["column_name"] = r.ColumnName
}

func (r runEnv) clone(db *gorm.DB) runEnv {
	r.runEnvDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r runEnv) replaceDB(db *gorm.DB) runEnv {
	r.runEnvDo.ReplaceDB(db)
	return r
}

type runEnvDo struct{ gen.DO }

type IRunEnvDo interface {
	gen.SubQuery
	Debug() IRunEnvDo
	WithContext(ctx context.Context) IRunEnvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRunEnvDo
	WriteDB() IRunEnvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRunEnvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRunEnvDo
	Not(conds ...gen.Condition) IRunEnvDo
	Or(conds ...gen.Condition) IRunEnvDo
	Select(conds ...field.Expr) IRunEnvDo
	Where(conds ...gen.Condition) IRunEnvDo
	Order(conds ...field.Expr) IRunEnvDo
	Distinct(cols ...field.Expr) IRunEnvDo
	Omit(cols ...field.Expr) IRunEnvDo
	Join(table schema.Tabler, on ...field.Expr) IRunEnvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRunEnvDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRunEnvDo
	Group(cols ...field.Expr) IRunEnvDo
	Having(conds ...gen.Condition) IRunEnvDo
	Limit(limit int) IRunEnvDo
	Offset(offset int) IRunEnvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRunEnvDo
	Unscoped() IRunEnvDo
	Create(values ...*entity.RunEnv) error
	CreateInBatches(values []*entity.RunEnv, batchSize int) error
	Save(values ...*entity.RunEnv) error
	First() (*entity.RunEnv, error)
	Take() (*entity.RunEnv, error)
	Last() (*entity.RunEnv, error)
	Find() ([]*entity.RunEnv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RunEnv, err error)
	FindInBatches(result *[]*entity.RunEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*entity.RunEnv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRunEnvDo
	Assign(attrs ...field.AssignExpr) IRunEnvDo
	Joins(fields ...field.RelationField) IRunEnvDo
	Preload(fields ...field.RelationField) IRunEnvDo
	FirstOrInit() (*entity.RunEnv, error)
	FirstOrCreate() (*entity.RunEnv, error)
	FindByPage(offset int, limit int) (result []*entity.RunEnv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRunEnvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r runEnvDo) Debug() IRunEnvDo {
	return r.withDO(r.DO.Debug())
}

func (r runEnvDo) WithContext(ctx context.Context) IRunEnvDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r runEnvDo) ReadDB() IRunEnvDo {
	return r.Clauses(dbresolver.Read)
}

func (r runEnvDo) WriteDB() IRunEnvDo {
	return r.Clauses(dbresolver.Write)
}

func (r runEnvDo) Session(config *gorm.Session) IRunEnvDo {
	return r.withDO(r.DO.Session(config))
}

func (r runEnvDo) Clauses(conds ...clause.Expression) IRunEnvDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r runEnvDo) Returning(value interface{}, columns ...string) IRunEnvDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r runEnvDo) Not(conds ...gen.Condition) IRunEnvDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r runEnvDo) Or(conds ...gen.Condition) IRunEnvDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r runEnvDo) Select(conds ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r runEnvDo) Where(conds ...gen.Condition) IRunEnvDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r runEnvDo) Order(conds ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r runEnvDo) Distinct(cols ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r runEnvDo) Omit(cols ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r runEnvDo) Join(table schema.Tabler, on ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r runEnvDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r runEnvDo) RightJoin(table schema.Tabler, on ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r runEnvDo) Group(cols ...field.Expr) IRunEnvDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r runEnvDo) Having(conds ...gen.Condition) IRunEnvDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r runEnvDo) Limit(limit int) IRunEnvDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r runEnvDo) Offset(offset int) IRunEnvDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r runEnvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRunEnvDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r runEnvDo) Unscoped() IRunEnvDo {
	return r.withDO(r.DO.Unscoped())
}

func (r runEnvDo) Create(values ...*entity.RunEnv) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r runEnvDo) CreateInBatches(values []*entity.RunEnv, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r runEnvDo) Save(values ...*entity.RunEnv) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r runEnvDo) First() (*entity.RunEnv, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunEnv), nil
	}
}

func (r runEnvDo) Take() (*entity.RunEnv, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunEnv), nil
	}
}

func (r runEnvDo) Last() (*entity.RunEnv, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunEnv), nil
	}
}

func (r runEnvDo) Find() ([]*entity.RunEnv, error) {
	result, err := r.DO.Find()
	return result.([]*entity.RunEnv), err
}

func (r runEnvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*entity.RunEnv, err error) {
	buf := make([]*entity.RunEnv, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r runEnvDo) FindInBatches(result *[]*entity.RunEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r runEnvDo) Attrs(attrs ...field.AssignExpr) IRunEnvDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r runEnvDo) Assign(attrs ...field.AssignExpr) IRunEnvDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r runEnvDo) Joins(fields ...field.RelationField) IRunEnvDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r runEnvDo) Preload(fields ...field.RelationField) IRunEnvDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r runEnvDo) FirstOrInit() (*entity.RunEnv, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunEnv), nil
	}
}

func (r runEnvDo) FirstOrCreate() (*entity.RunEnv, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*entity.RunEnv), nil
	}
}

func (r runEnvDo) FindByPage(offset int, limit int) (result []*entity.RunEnv, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r runEnvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r runEnvDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r runEnvDo) Delete(models ...*entity.RunEnv) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *runEnvDo) withDO(do gen.Dao) *runEnvDo {
	r.DO = *do.(*gen.DO)
	return r
}
