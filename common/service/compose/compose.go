package compose

import (
	"context"
	"github.com/compose-spec/compose-go/v2/cli"
	"github.com/compose-spec/compose-go/v2/types"
	"github.com/donknap/dpanel/common/function"
	"os"
	"path/filepath"
)

func WithYamlPath(path string) cli.ProjectOptionsFn {
	return func(options *cli.ProjectOptions) error {
		options.ConfigPaths = append(options.ConfigPaths, path)
		return nil
	}
}

func NewCompose(opts ...cli.ProjectOptionsFn) (*Wrapper, error) {
	// 自定义解析
	opts = append(opts,
		cli.WithExtension(ExtensionName, Ext{}),
		cli.WithExtension(ExtensionServiceName, ExtService{}),
	)
	options, err := cli.NewProjectOptions(
		[]string{},
		opts...,
	)
	if err != nil {
		return nil, err
	}

	project, err := options.LoadProject(context.Background())
	if err != nil {
		return nil, err
	}
	wrapper := &Wrapper{
		Project: project,
	}
	return wrapper, nil
}

func NewComposeWithYaml(yaml []byte) (*Wrapper, error) {
	tempComposeFile, _ := os.CreateTemp("", "dpanel-compose")
	err := os.WriteFile(
		tempComposeFile.Name(),
		append([]byte("# 此文件由 dpanel 面板生成，请勿修改！ \n# Generated by dpanel, do not modify!\n"), yaml...),
		0666,
	)
	defer os.Remove(tempComposeFile.Name())

	if err != nil {
		return nil, err
	}
	wrapper, err := NewCompose(WithYamlPath(tempComposeFile.Name()))
	if err != nil {
		return nil, err
	}
	return wrapper, nil
}

type Wrapper struct {
	Project *types.Project
}

// 区别于 Project.GetService 方法，此方法会将扩展信息一起返回
func (self Wrapper) GetService(name string) (types.ServiceConfig, ExtService, error) {
	service, err := self.Project.GetService(name)
	if err != nil {
		return types.ServiceConfig{}, ExtService{}, err
	}

	ext := ExtService{}
	exists, err := service.Extensions.Get(ExtensionServiceName, &ext)
	if err == nil && exists {
		return service, ext, nil
	}
	return service, ExtService{}, nil
}

func (self Wrapper) GetBaseCommand() []string {
	cmd := make([]string, 0)
	for _, file := range self.Project.ComposeFiles {
		cmd = append(cmd, "-f", file)
	}
	cmd = append(cmd, "-p", self.Project.Name)

	envFilePath := filepath.Join(self.Project.WorkingDir, ".env")
	_, err := os.Stat(envFilePath)
	if err == nil {
		cmd = append(cmd, "--env-file", envFilePath)
	}
	return cmd
}

// 获取compose中的服务名称，并过滤掉不需要部署的
func (self Wrapper) GetServiceNameList() []string {
	serviceNames := make([]string, 0)

	list, err := self.Project.GetServices()
	if err != nil {
		return serviceNames
	}

	ext, exists := self.getProjectExt()

	for _, item := range list {
		if exists && !function.IsEmptyArray(ext.DisabledServices) {
			if !function.InArray(ext.DisabledServices, item.Name) {
				serviceNames = append(serviceNames, item.Name)
			}
		} else {
			serviceNames = append(serviceNames, item.Name)
		}
	}

	return serviceNames
}

func (self Wrapper) getProjectExt() (Ext, bool) {
	ext := Ext{}
	exists, _ := self.Project.Extensions.Get(ExtensionName, &ext)
	return ext, exists
}
